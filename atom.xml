<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ylr</title>
  <icon>https://www.gravatar.com/avatar/60a05d3a4e921106e514d6a3d1640329</icon>
  <subtitle>dl &amp; cv</subtitle>
  <link href="https://yu-lingrui.github.io/atom.xml" rel="self"/>
  
  <link href="https://yu-lingrui.github.io/"/>
  <updated>2023-12-08T16:08:49.642Z</updated>
  <id>https://yu-lingrui.github.io/</id>
  
  <author>
    <name>余翎瑞</name>
    <email>15282590579@163.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>大模型-多模态-AIGC</title>
    <link href="https://yu-lingrui.github.io/2023/12/07/%E5%A4%A7%E6%A8%A1%E5%9E%8B-%E5%A4%9A%E6%A8%A1%E6%80%81-AIGC/"/>
    <id>https://yu-lingrui.github.io/2023/12/07/%E5%A4%A7%E6%A8%A1%E5%9E%8B-%E5%A4%9A%E6%A8%A1%E6%80%81-AIGC/</id>
    <published>2023-12-07T13:48:22.000Z</published>
    <updated>2023-12-08T16:08:49.642Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h1 id="我无需向众神祈祷，因为众神传颂的都是我的名号！"><a href="#我无需向众神祈祷，因为众神传颂的都是我的名号！" class="headerlink" title="我无需向众神祈祷，因为众神传颂的都是我的名号！"></a>我无需向众神祈祷，因为众神传颂的都是我的名号！</h1><p><videosrc="..\assets\video/entry.mp4" controls=""height=600 width=800><br></video></p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=475479888&auto=1&height=66"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h1 id=&quot;我无需向众神祈祷，因为众神传颂的都是我的名号！&quot;&gt;&lt;a href=&quot;#我无需向众神祈祷，因为众神传颂的都是我的名号！&quot; class=&quot;headerlink&quot; title=&quot;我无需向众神祈祷，因为众神传颂的都是我的名</summary>
      
    
    
    
    
    <category term="AI" scheme="https://yu-lingrui.github.io/tags/AI/"/>
    
    <category term="gpt" scheme="https://yu-lingrui.github.io/tags/gpt/"/>
    
  </entry>
  
  <entry>
    <title>pjax: 当ajax遇上pushState</title>
    <link href="https://yu-lingrui.github.io/2014/02/12/about-pjax/"/>
    <id>https://yu-lingrui.github.io/2014/02/12/about-pjax/</id>
    <published>2014-02-12T00:55:00.000Z</published>
    <updated>2023-12-07T16:24:01.675Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>var pjax &#x3D; pushState + ajax;<br>小时候，小浣熊方便面里面有各种水浒人物的卡片。我买了一包，吃了方便面，饱了。而我又买了第二包，不是想吃方便面，而是仅仅想得到里面的卡片…          </p></blockquote><span id="more"></span><p>##<strong>一、简介</strong><br>pushState是html5中提供的方法，用以</p><ul><li>无刷新的更新浏览器地址栏；            </li><li>如其名称，将新地址push到历史堆栈中</li></ul><p>用法：<code>pushState(data, title ,url)</code>            </p><p>data为保存的对象，可以在window.onpopstate时获取到；title为页面标题；url为需地址栏和历史发生改变的url。<br>正是这点看似很平常的功能，跟ajax结合到一起产生了火花。因为，ajax最擅长的事情就是局部刷新页面。</p><p>##<strong>二、ajax的纠结历史</strong><br>一切可以从ajax最擅长的事情说起。<br>ajax作为一个异步请求模型，从最初设计开始，也许压根就没打算将它跟浏览器历史挂钩。原因是历史堆栈所记录的，某种意思上可以说是顺序，跟我们理解的“同步”更为密切。</p><p>因而，<code>ajax可以无刷新改变页面内容，却无法改变页面的url</code>。</p><ul><li>####历史问题1 - 如何操控历史</li></ul><p>当单页面越来越流行，操作记录却很容易被忽略。假设有这样的单页面，按照分类点击，界面逐层递进：<code>体育 - 篮球 -nba -马刺队 - 邓肯</code><br>当我们点了4下到“邓肯”界面时，一个不小心的刷新，出现在你面前的也许是“体育”。原因是操作记录没有被记录。<br>而通常的解决方案是修改hash，每递进一层，去更新url的hash值，这样的方法：</p><ol><li>刷新时预先判断url的hash，从而知道这是哪一层，加载相应数据；          </li><li>支持了历史</li></ol><p>这样的方式貌似比较完善，其实不然。</p><ul><li>####历史问题2 - 对搜索引擎不友好</li></ul><p>最大的问题是，hash后生成的内容是不会被搜索引擎引用到。数据不能被爬取，无疑是浪费和损失。因此google放言，咱可以约定个协议：<code>#!xxx</code>这样hash的url，google也去爬取。称之为<code>hash bang</code>（哈希大爆炸？）。这一协议，在g+，twitter，人人，新浪微博上都可以看到。</p><p>事实上，ajax最或缺的两个问题，恰好被pushState的功能补充完善。</p><p>##<strong>三、pjax带来的价值</strong><br>除去补齐了ajax的问题，我们发现pjax会给web带来更多的好处。<br>回到开始说的“两包方便面”，我的意思是，有时你访问两个url，部分数据是相同的。比如百度贴吧，第一页和第二页的区别只是帖子内容（卡片）的不同，网站外框部分（方便面）都是一样的，这些东西就不需要在页面刷新时重复加载。</p><p>ajax处理这样的局部刷新，已经给我们带来了web2.0的体验，而加上pushstate的ajax则更进一步：</p><ol><li>一个url对应一套数据，有利于SEO；</li><li>更改数据和url时，只是局部刷新，带来较好的用户体验；</li><li>兼容性好，对不支持pushstate的浏览器，url也能正常请求页面（虽然有重复加载）；</li><li>刷新页面时，由于是url唯一，能正常加载到用户希望看到的数据，比处理hash的方式更方便；</li><li>后退与前进的浏览器操作，依然可以局部刷新（通过onpushstate事件捕获）</li></ol><p>##<strong>四、注意事项</strong></p><p>然而pjax不等于单纯的分离使用pushstate与ajax，还必须得做一些封装。缘于以下我能想到的注意事项：</p><ul><li><p>服务器端增加额外处理逻辑<br>服务器端，需要根据请求的参数，作出全页渲染或局部渲染响应</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Accept:text/html, */*; q=0.01</span><br><span class="line">Accept-Encoding:gzip,deflate,sdch</span><br><span class="line">Connection:keep-alive</span><br><span class="line">Host:qianduannotes.duapp.com</span><br><span class="line">User-Agent:AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.63 Safari/537.36</span><br><span class="line">X-Requested-With:XMLHttpRequest</span><br><span class="line">X-PJAX:true</span><br></pre></td></tr></table></figure><p>比如请求头部可以设定一个X-PAJX:true，用以通知服务器。</p></li><li><p>浏览器兼容<br>假如浏览器不支持pushstate，提供fallback操作，直接打开需更改url的地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$.support.pjax = window.history &amp;&amp; window.history.pushState</span><br><span class="line">// Fallback</span><br><span class="line">if ( !$.support.pjax ) &#123;</span><br><span class="line">  $.pjax = function( options ) &#123;</span><br><span class="line">    window.location = $.isFunction(options.url) ? options.url() : options.url</span><br><span class="line">  &#125;</span><br><span class="line">  $.fn.pjax = function() &#123; return this &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>本地存储机制<br>无疑pjax与localstorage共同使用可以进一步提升体验，但这一步容易忽略的是数据上报。</p></li></ul><p>##<strong>五、参考资料</strong><br><a href="https://github.com/defunkt/jquery-pjax">jquery-pjax</a><br><a href="https://github.com/welefen/pjax">welefen封装的pjax</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;var pjax &amp;#x3D; pushState + ajax;&lt;br&gt;小时候，小浣熊方便面里面有各种水浒人物的卡片。我买了一包，吃了方便面，饱了。而我又买了第二包，不是想吃方便面，而是仅仅想得到里面的卡片…          &lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="js" scheme="https://yu-lingrui.github.io/tags/js/"/>
    
    <category term="html5" scheme="https://yu-lingrui.github.io/tags/html5/"/>
    
  </entry>
  
</feed>
